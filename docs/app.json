[{"name":"app.R","content":"\n# packages ----------------------------------------------------------------\n\nlibrary(\"shiny\")\nlibrary(\"sortable\")\nlibrary(\"ggplot2\")\nlibrary(\"patchwork\")\nlibrary(\"miniPCH\")\n\n# data --------------------------------------------------------------------\n\n# adjust depending on where this is hosted:\n# shiny-live served with httpuv\n# my_url <- \"http://127.0.0.1:7446/\"\n# shiny-live on github pages\nmy_url <- \"https://tobiasfellinger.github.io/ShinyDiplomarbeit/\"\ndatasets <- readRDS(gzcon(url(paste0(my_url, \"datasets.Rds\"))))\n# shiny local\n# my_file <- \"../\"\n# datasets <- readRDS(paste0(my_file, \"datasets.Rds\"))\nexclude_from_scenario_vars <- c(\"recruitment time\", \"rate of random withdrawal\", \"number of patients\")\nfilter_scenario_values <- c(\"recruitment time\"=0, \"rate of random withdrawal\"=0, \"number of patients\"=1000, \"method\"=\"logrank test\")\nscenario_table_vars <- c(\"median survival in the treatment arm\", \"median survival in the control arm\", \n                         \"RMST (6m) in the treatment arm\", \"RMST (6m) in the control arm\", \n                         \"geometric average hazard ratio (6m)\", \"average hazard ratio (6m)\", \n                         \"RMST (12m) in the treatment arm\", \"RMST (12m) in the control arm\", \n                         \"geometric average hazard ratio (12m)\", \"average hazard ratio (12m)\", \n                         \"milestone survival in the treatment arm (6m)\", \"milestone survival in the control arm (6m)\", \n                         \"milestone survival in the treatment arm (12m)\", \"milestone survival in the control arm (12m)\"\n)\n\n# call package functions once to load packages ----------------------------\ntmp <- miniPCH::pch_functions(t=0, lambda=1)\ntmp <- ggplot(NULL)\ntmp <- NULL\n\n# functions ---------------------------------------------------------------\n\ncombined_plot <- function(\n    data,\n    methods,\n    xvars,\n    yvar,\n    facet_x_vars=c(),\n    facet_y_vars=c(),\n    split_var = 1,\n    heights_plots = c(3,1),\n    scale_stairs = 0.75,\n    grid_level = 2,\n    scales = \"fixed\",\n    hlines = numeric(0),\n    use_colours = NULL,\n    use_shapes  = NULL,\n    yrange = c(NA_real_, NA_real_)\n){\n  \n  stopifnot(split_var <= length(xvars))\n  stopifnot(split_var > 0)\n  \n  stopifnot(grid_level > 0)\n  grid_level <- min(grid_level, length(xvars))\n  \n  facet_vars_y_sym <- rlang::syms(facet_y_vars)\n  facet_vars_x_sym <- rlang::syms(facet_x_vars)\n  yvar  <- rlang::sym(yvar)\n  \n  data <- data |>\n    subset(method %in% methods)\n  \n  # create combined x variable\n  data$x <- do.call(interaction, c(data[, xvars], lex.order=TRUE, drop=TRUE)) |>\n    as.integer()\n  \n  # remove rows with missing yvar\n  data <- data |> \n    subset(!is.na(get(yvar)))\n  \n  # split lines\n  group_vars <- xvars[1:split_var]\n  data$x_split <- do.call(interaction, c(data[, group_vars], lex.order=TRUE, drop=TRUE)) |>\n    as.integer()\n  \n  # grid breaks\n  grid_vars <- xvars[1:grid_level]\n  data$x_grid <-  do.call(interaction, c(data[, grid_vars], lex.order=TRUE))\n  grid_breaks <- data$x[order(data$x)][!duplicated(data$x_grid[order(data$x)])]\n  \n  plot_1 <- ggplot2::ggplot(data, ggplot2::aes(\n    x=x,\n    y=!!yvar,\n    group=interaction(method, x_split),\n    colour=method,\n    shape=method\n  )) +\n    ggplot2::annotate(\"rect\", xmin=-Inf, xmax=Inf, ymin=yrange[1], ymax=yrange[2], colour=\"grey\", alpha=0.5) +\n    ggplot2::geom_line() +\n    ggplot2::geom_point(size=4) +\n    ggplot2::scale_x_continuous(\n      breaks = grid_breaks,\n      minor_breaks = NULL,\n      expand = ggplot2::expansion(0,0)\n    ) +\n    ggplot2::theme(\n      axis.text.x = ggplot2::element_blank(),\n      axis.ticks.x = ggplot2::element_blank(),\n      axis.title.x = ggplot2::element_blank()\n    )  +\n    ggplot2::facet_grid(\n      cols = dplyr::vars(!!!facet_vars_x_sym),\n      rows = dplyr::vars(!!!facet_vars_y_sym),\n      labeller = ggplot2::label_both,\n      scales = scales\n    ) +\n    ggplot2::geom_hline(yintercept=hlines)\n  \n  data_plot2 <- data[!duplicated(do.call(interaction, data[,c(\"x\", facet_x_vars)])), ]\n  \n  plot_2 <- lapply(xvars, \\(xx){\n    \n    if(is.factor(data_plot2[, xx, drop=TRUE])){\n      data_plot2$tmp_yvar <- data_plot2[, xx, drop=TRUE]\n    } else {\n      data_plot2$tmp_yvar <- factor(format(data_plot2[, xx, drop=TRUE], digits=3))\n    }\n    \n    ggplot2::ggplot(data_plot2, ggplot2::aes(x=x, y=tmp_yvar, group=method)) +\n      ggplot2::geom_step(linewidth=0.25) +\n      # ggplot2::geom_point(shape=4) +\n      ggplot2::scale_x_continuous(\n        breaks = grid_breaks,\n        minor_breaks = NULL,\n        expand = ggplot2::expansion(0,0)\n      ) +\n      ggplot2::theme_void(\n        base_size = 9\n      ) +\n      ggplot2::theme(\n        axis.text.y = ggplot2::element_text(),\n        axis.title.y = ggplot2::element_text(angle=75),\n        strip.background = ggplot2::element_blank(),\n        strip.text = ggplot2::element_blank(),\n        panel.grid.major.y = ggplot2::element_line(\n          linewidth = 0.125,\n          colour=\"lightgray\"\n        )\n      ) +\n      ggplot2::ylab(as.character(xx))  +\n      ggplot2::facet_grid(\n        cols = dplyr::vars(!!!facet_vars_x_sym)\n      )\n  })\n  \n  plot_2 <- patchwork::wrap_plots(plot_2, ncol=1)\n  \n  if(!is.null(use_colours)){\n    plot_1 <- plot_1 +\n      ggplot2::scale_colour_manual(values=use_colours)\n  }\n  \n  if(!is.null(use_shapes)){\n    plot_1 <- plot_1 +\n      ggplot2::scale_shape_manual(values=use_shapes)\n  }\n  result <- (plot_1 / plot_2) + patchwork::plot_layout(heights=heights_plots)\n  result\n}\n\nscenario_plot <- function(scenario, type){\n  range_t  <- c(0, 1095.75)\n  range_hr <- c(0.7, 1/0.7)\n  range_s  <- c(0,1)\n  breaks_t <- 365.25 * seq(0,36,by=6) / 12\n  \n  if(nrow(scenario) == 0){\n    return(\n      ggplot(data=NULL) + \n      geom_text(aes(x=0,y=0, label=\"No scenarios for selected parameter combination.\")) + \n      theme_void()\n    )\n  }\n  \n  # construct functions\n  if(type %in% c(\"delayed\", \"crossing\", \"subgroup\")){\n    funs_a <- miniPCH::pch_functions(\n      t=0, \n      lambda=scenario$hazard_ctrl\n    )\n  } else {\n    funs_a <- miniPCH::multistate_functions(\n      t = 0,\n      Q = array(matrix(c(\n          -(scenario$hazard_ctrl + scenario$prog_rate_ctrl),     scenario$prog_rate_ctrl,       scenario$hazard_ctrl,\n                                                          0, -scenario$hazard_after_prog, scenario$hazard_after_prog,\n                                                          0,                           0,                          0\n        ), 3, 3, byrow = TRUE),\n        dim=c(3,3,1)\n      ),\n      pi = c(1,0,0),\n      abs = c(0,0,1)\n    )\n  }\n  \n  switch(\n    type,\n    delayed = {\n      if(scenario$delay == 0){\n        funs_b <- miniPCH::pch_functions(\n          t = c(0),\n          lambda = c(scenario$hazard_trt)\n        )\n      } else {\n        funs_b <- miniPCH::pch_functions(\n          t = c(0, 365.25 * scenario$delay / 12),\n          lambda = c(scenario$hazard_ctrl, scenario$hazard_trt)\n        )\n      }\n    },\n    crossing = {\n      if(scenario$crossing == 0){\n        funs_b <- miniPCH::pch_functions(\n          t = c(0),\n          lambda = c(scenario$hazard_trt_after)\n        )\n      } else {\n       funs_b <- miniPCH::pch_functions(\n         t = c(0, 365.25 * scenario$crossing / 12),\n         lambda = c(scenario$hazard_trt_before, scenario$hazard_trt_after)\n       )\n      }\n    },\n    subgroup = {\n      funs_b <- miniPCH::multistate_functions(\n        t = 0,\n        Q = array(matrix(c(\n            -scenario$hazard_subgroup,                    0, scenario$hazard_subgroup,\n                                    0, -scenario$hazard_trt,      scenario$hazard_trt,\n                                    0,                    0,                        0\n          ), 3,3, byrow = TRUE),\n          dim=c(3,3,1)\n        ),\n        pi = c(scenario$prevalence, (1-scenario$prevalence),0),\n        abs = c(0,0,1)\n      )\n    },\n    progression = {\n      funs_b <- miniPCH::multistate_functions(\n        t = 0,\n      Q = array(matrix(c(\n          -(scenario$hazard_trt + scenario$prog_rate_trt),      scenario$prog_rate_trt,        scenario$hazard_trt,\n                                                        0, -scenario$hazard_after_prog, scenario$hazard_after_prog,\n                                                        0,                           0,                          0\n        ), 3, 3, byrow = TRUE),\n        dim=c(3,3,1)\n      ),\n        pi = c(1,0,0),\n        abs = c(0,0,1)\n      )\n    }\n  )\n  \n  hr <- \\(t){\n    funs_b$h(t) / funs_a$h(t)\n  }\n  \n  # plot\n  plot_s <- ggplot(NULL) + \n    stat_function(aes(colour=\"control\"  , lty=\"control\"  ),   fun=funs_a$s) + \n    stat_function(aes(colour=\"treatment\", lty=\"treatment\"), fun=funs_b$s) + \n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) + \n    scale_y_continuous(limits=range_s, expand=expansion(0,0), name=\"survival\")\n  \n  plot_h <- ggplot(NULL) + \n    stat_function(aes(colour=\"control\"  , lty=\"control\"  ),   fun=funs_a$h) + \n    stat_function(aes(colour=\"treatment\", lty=\"treatment\"), fun=funs_b$h) + \n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) +\n    scale_y_continuous(name=\"hazard\") +\n    expand_limits(y=0)\n  \n  plot_hr <- ggplot(NULL) + \n    stat_function(fun=hr) + \n    geom_hline(yintercept = 1, colour=\"darkgray\") +\n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) +\n    scale_y_continuous(limits=range_hr, expand=expansion(0,0.1), name=\"hazard ratio\")\n  \n  my_colors <- palette.colors(3, \"Okabe-Ito\")[c(2,3)] |>\n    setNames(c(\"control\", \"treatment\"))\n  \n  my_lty <- c(1, 3) |>\n    setNames(c(\"control\", \"treatment\"))\n  \n  \n  patchwork::wrap_plots(plot_s, plot_h, plot_hr) +\n    patchwork::plot_layout(guides = \"collect\") &\n    ggplot2::theme_bw() &\n    ggplot2::theme(legend.position=\"bottom\") &\n    ggplot2::scale_colour_manual(\n      values = my_colors,\n      name = \"group\"\n    ) &\n    ggplot2::scale_linetype_manual(\n      values = my_lty,\n      name = \"group\"\n    )\n}\n\n# ui ----------------------------------------------------------------------\n\nui <- fluidPage(\n  titlePanel(title=\"Simulation Results, Master's Thesis Tobias Fellinger\", windowTitle = \"Sim Results Msc. Tobias Fellinger\"),\n  tabsetPanel(\n# Tab: Description --------------------------------------------------------\n    tabPanel(\n      \"Description\",\n      includeHTML(\"description.html\"),\n      style=\"margin-top:1rem;\"\n    ),\n# Tab: Scenarios ----------------------------------------------------------\n    tabPanel(\n      \"Scenarios\",\n      sidebarLayout(\n        sidebarPanel(\n          selectInput(\n            inputId = \"scenarios_scenarioclass\",\n            label = \"Scenario\",\n            choices = names(datasets)\n          ),\n          uiOutput(\n            outputId = \"scenario_scenariofilter_ui\"\n          )\n        ),\n        mainPanel(\n          actionButton(\n            inputId = \"scenario_draw\",\n            label = \"redraw\",\n            icon = icon(\"redo\")\n          ),\n          plotOutput(\n            \"scenario_plot\",\n            width=\"100%\",\n            height=\"600px\"\n          ),\n          tableOutput(\n            \"scenario_table\"\n          )\n        )\n      ),\n      style=\"margin-top:1rem;\"\n    ),\n# Tab: Results ------------------------------------------------------------\n    tabPanel(\n      \"Simulation Results\",\n      sidebarLayout(\n        sidebarPanel(\n          selectInput(\n            inputId = \"results_scenarioclass\",\n            label = \"Scenario\",\n            choices = names(datasets)\n          ),\n          uiOutput(\n            outputId = \"results_methods_ui\"\n          ),\n          uiOutput(\n            outputId = \"results_yvar_ui\"\n          ),\n          uiOutput(\n            outputId = \"results_scenariofilter_ui\"\n          ),\n          uiOutput(\n            outputId = \"results_filters_ui\"\n          )\n        ),\n        mainPanel(\n          actionButton(\n            inputId = \"results_draw\",\n            label = \"redraw\",\n            icon = icon(\"redo\")\n          ),\n          plotOutput(\n            \"results_plot\",\n            width=\"100%\",\n            height=\"800px\"\n          ),\n          checkboxInput(\"hline0025\", \"horizontal line at 0.025 (nominal alpha)\"),\n          checkboxInput(\"hline0031\", \"horizontal line at 0.031 (nominal alpha + CI)\"),\n          checkboxInput(\"hline095\",  \"horizontal line at 0.95 (nominal CI coverage)\"),\n          checkboxInput(\"rectCoverage\", \"ribbon from 0.9584 to 0.9412 (nominal coverage + CI)\")\n        )\n      ),\n      style=\"margin-top:1rem;\"\n    )\n  )\n)\n\n# server ------------------------------------------------------------------\n\nserver <- function(input, output) {\n\n# Tab Results: reactive values --------------------------------------------\n  \n  scenario_class <- reactive({\n    datasets[[input$results_scenarioclass]]\n  })\n  \n  filter_vars <- reactive({\n    input$filter_vars\n  })\n  \n\n# Tab Results: render UI --------------------------------------------------\n\n  output$results_methods_ui <- renderUI({\n    selectInput(\n      inputId = \"results_methods\",\n      label = \"Methods\",\n      choices = scenario_class()$methods,\n      multiple = TRUE,\n      selected = c(\"logrank test\", \"max-combo test\", \"modestly wtd. t*=8m\")\n    )\n  })\n  \n  output$results_yvar_ui <- renderUI({\n    selectInput(\n      inputId = \"results_yvar\",\n      label = \"Plot Variable\",\n      selected = \"rejection rate, one sided alpha=0.025\",\n      choices = names(scenario_class()$data)\n    )\n  })\n  \n  output$results_scenariofilter_ui <- renderUI({\n    bucket_list(\n      header=\"Scenario Parameters\",\n      group_name=\"scenario_params\",\n      orientation = \"vertical\",\n      add_rank_list(\n        text = \"x-Axis\",\n        labels=scenario_class()$design_variables,\n        input_id = \"loop_xvars\"\n      ),\n      add_rank_list(\n        text = \"Facets, Columns\",\n        labels=NULL,\n        input_id = \"facets_cols\"\n      ),\n      add_rank_list(\n        text = \"Facets, Rows\",\n        labels=NULL,\n        input_id = \"facets_rows\"\n      ),\n      add_rank_list(\n        text = \"Filter\",\n        labels=NULL,\n        input_id = \"filter_vars\"\n      )\n    )\n  })\n  \n  output$results_filters_ui <- renderUI({\n    lapply(filter_vars(), \\(var){\n      selectInput(\n        inputId = paste0(\"filter_\", var),\n        label = var,\n        choices = scenario_class()$filter_values[[var]]\n      )\n    })\n  })\n\n# Tab Results: Plot -------------------------------------------------------\n\n  output$results_plot <- renderPlot({\n    tmp_data <- scenario_class()$data \n    tmp_methods <- input$results_methods\n    tmp_xvars <- input$loop_xvars\n    tmp_yvar <- input$results_yvar\n    tmp_cols <- input$facets_cols\n    tmp_rows <- input$facets_rows\n    tmp_filter <- input$filter_vars\n    \n    tmp_filter_values <- sapply(\n      tmp_filter,\n      \\(i){input[[paste0(\"filter_\", i)]]}\n    )\n    names(tmp_filter_values) <- tmp_filter\n    \n    for(i in tmp_filter){\n      tmp_data <- tmp_data[tmp_data[, i] == tmp_filter_values[i], ]\n    }\n    \n    hlines <- c()\n    if(input$hline0025){\n      hlines <- c(hlines, 0.025)\n    }\n    if(input$hline0031){\n      hlines <- c(hlines, 0.031)\n    }\n    if(input$hline095){\n      hlines <- c(hlines, 0.95)\n    }\n    \n    if(input$rectCoverage){\n      yrange=c(0.9412, 0.9584)\n    } else {\n      yrange = c(NA_real_, NA_real_)\n    }\n          \n          \n    combined_plot(\n      tmp_data,\n      tmp_methods,\n      tmp_xvars,\n      tmp_yvar,\n      tmp_cols,\n      tmp_rows,\n      hlines = hlines,\n      yrange = yrange\n    )\n  }) |> bindEvent(input$results_draw)\n  \n\n# Tab Scenarios: reactive values ------------------------------------------\n\n  scenario_filter_vars <- reactive({\n    res <- datasets[[input$scenarios_scenarioclass]]$filter_values\n    res <- res[!(names(res) %in% exclude_from_scenario_vars)]\n    res\n  })\n  \n  scenario_data <- reactive({\n    tmp_data <- datasets[[input$scenarios_scenarioclass]]$data\n    tmp_filter <- names(scenario_filter_vars())\n    \n    tmp_filter_values <- sapply(\n      tmp_filter,\n      \\(i){input[[paste0(\"scenario_filter_\", i)]]}\n    )\n    names(tmp_filter_values) <- tmp_filter\n    \n    tmp_filter_values <- c(tmp_filter_values, filter_scenario_values)\n    for(i in names(tmp_filter_values)){\n      tmp_data <- tmp_data[tmp_data[, i] == tmp_filter_values[i], ]\n    }\n    \n    tmp_data\n  })|> \n    bindEvent(input$scenario_draw)\n\n# Tab Scenarios: renderUI -------------------------------------------------\n\n  output$scenario_scenariofilter_ui <- renderUI({\n    lapply(names(scenario_filter_vars()), \\(var){\n      selectInput(\n        inputId = paste0(\"scenario_filter_\", var),\n        label = var,\n        choices = scenario_filter_vars()[[var]]\n      )\n    })\n  })\n\n# Tab Scenarios: Plot -----------------------------------------------------\n  \n  output$scenario_plot <- renderPlot({\n    scenario_plot(scenario_data(), input$scenarios_scenarioclass)\n  }) |> \n    bindEvent(input$scenario_draw)\n  \n\n# Tab Scenario: Table -----------------------------------------------------\n  \n  output$scenario_table <- renderTable({\n    tmp_data <- scenario_data()[, ] |>\n      subset(select=scenario_table_vars)\n    \n    data.frame(\n      `Summary Statistic` = names(tmp_data),\n      `Value`             = t(tmp_data[1,]),\n      check.names = FALSE\n    )\n  }) \n  \n  \n  \n} # end server\n\n\n# run ---------------------------------------------------------------------\n\n\n\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"description.html","content":"<div style=\"max-width:750px;\">\n<div id=\"interactive-presentation-of-simulation-results\" class=\"section level2\">\n<h2>Interactive Presentation of Simulation Results<\/h2>\n<p>This shiny app includes visualisations of the simulated scenarios as\nwell as the simulation results for the simulations conducted in for my\nmaster thesis “Implementation of a Simulation Study to Evaluate the\nPerformance Characteristics of Statistical Methods for Analysis of Time\nto Event Data under Non-Proportional Hazard”<\/p>\n<p>Both sections contain a filter to select scenarios in the left panel.\nAfter selecting the scenario plots and tables can be redrawn using the\n“redraw” button.<\/p>\n<\/div>\n<div id=\"scenarios\" class=\"section level2\">\n<h2>Scenarios<\/h2>\n<p>In this panel survival function, hazard function and hazard ratio of\nthe two arms of the selected scenario are plotted and a table of summary\nstatistics of the corresponding scenario is drawn.<\/p>\n<\/div>\n<div id=\"simulation-results\" class=\"section level2\">\n<h2>Simulation Results<\/h2>\n<p>In this panel a combined trellis/nested-loop plot of the selected\nscenarios is drawn. Methods and performance measures can be\nselected.<\/p>\n<\/div>\n<\/div>","type":"text"}]
